openapi: '3.0.2'
info:
  title: Openbox Backend Internal API
  version: '1.0'
servers:
  - url: https://localhost:8080/api
    description: The local server
tags:
  - name: application
  - name: announcement
  
paths:
  /process/application/leave-application:
    put:
      tags:
        - application
      description: User initiate a new leave application with required information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./models/LeaveApplication.yml#/components/schemas/PutLeaveApplication"
              
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './models/Application.yml#/components/schemas/Application' 
                  - $ref: './models/LeaveApplication.yml#/components/schemas/LeaveApplication' 
                
  /process/application/{applicationId}/permit:
    post:
      tags:
        - application
      description: 'Permit an application by manager. The api can only be triggered by the applicant''s manager'
      parameters:
        - in: path
          name: applicationId
          schema:
            type: integer
          required: true
          description: The id of the application.
      responses:
        '200':
          description: OK
  
  /process/application/{applicationId}/reject:
    post:
      tags:
        - application
      description: 'Reject an application by manager. The api can only be triggered by the applicant''s manager'
      parameters:
        - in: path
          name: applicationId
          schema:
            type: integer
          required: true
          description: "The ID of the application."
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: "The leave time is obscured. Please indicate a precise time"
      responses:
        '200':
          description: OK

  /process/application?handler={handler}&applicant={applicant}:
    get:
      tags:
        - application
      description: Get applications by condition(s), return an application list including all of the applications satisfied the condition(s).
      parameters:
        - in: query
          name: handler
          schema:
            type: string
          description: Get the applications by current handler
          example: "raynold"
          required: false
        - in: query
          name: applicant
          schema:
            type: string 
          required: false
          example: "tony"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  allOf:
                  - $ref: './models/Application.yml#/components/schemas/Application' 
                  - $ref: './models/LeaveApplication.yml#/components/schemas/LeaveApplication' 

  /process/application/{applicationId}/note:
    put:
      tags:
        - application
      description: Put note by manager
      parameters:
        - in: path
          name: applicationId
          schema:
            type: integer
          required: true
          description: The id of the application.
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
            example: "This is a sick note"
      responses:
        '200':
          description: OK 
          
  /process/application/{applicationId}:
    delete:
      tags:
        - application
      description: Delete the application by the application id.
      parameters:
        - in: path
          name: applicationId
          schema:
            type: integer
          required: true
          description: The id of the application.
      responses:
        '200':
          description: OK

  /announcement:
    post:
      tags:
        - announcement
      description: Create a new announcement.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './models/Announcement.yml#/components/schemas/postAnnouncement'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './models/Announcement.yml#/components/schemas/Announcement'

  /announcement?expireAfter={date}:
    get:
      tags:
        - announcement
      description: Get all announcements the expiry date of which is after the given date.
      parameters:
        - in: query
          name: expiryDate
          schema:
            type: string
          required: false
          description: The expiry date of the announcement
          example: "2024-03-31T08:30:00-07:00"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  allOf:
                    - $ref: './models/Announcement.yml#/components/schemas/Announcement'

  /announcement/{announcementId}:
    get:
      tags:
        - announcement
      description: Get the announcement by the announcement id.
      parameters:
        - in: path
          name: announcementId
          schema:
            type: integer
          required: true
          description: The id of the announcement.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './models/Announcement.yml#/components/schemas/Announcement'
    delete:
      tags:
        - announcement
      description: Delete the announcement by the announcement id.
      parameters:
        - in: path
          name: announcementId
          schema:
            type: integer
          required: true
          description: The id of the announcement.
      responses:
        '200':
          description: OK
    put:
      tags:
        - announcement
      description: Update the announcement by the announcement id.
      parameters:
        - in: path
          name: announcementid
          schema:
            type: integer
          required: true
          description: The id of the announcement.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './models/Announcement.yml#/components/schemas/putAnnouncement'
      responses:
        '200':
          description: OK
  
  /announcement/{announcementId}/read:
    post:
      tags:
        - announcement
      description: |
        Mark the announcement as read by the current user. <br> <br>
        __Notice:__ Only the first time the reader read the announcement should call this function. If the function is called multiple times with the same user and annoncement, there will be no change!
      parameters:
        - in: path
          name: announcementId
          schema:
            type: integer
          required: true
          description: The id of the announcement.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                reader:
                  $ref: './models/Announcement.yml#/components/schemas/announcementReadLog/properties/reader'
      responses:
        '200':
          description: OK
  
  /announcement/readLog?reader={reader}:
    get:
      tags:
        - announcement
      description: Get all announcement read log of the reader.
      parameters:
        - in: query
          name: reader
          schema:
            type: string
          required: true
          description: The username of the reader.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: './models/Announcement.yml#/components/schemas/announcementReadLog'
  
  /forum/post:
    post:
      tags:
        - post
      description: Create a new post.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './models/Post.yml#/components/schemas/PostPost'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './models/Post.yml#/components/schemas/Post'
  /forum/post/{postId}: 
    get:
      tags:
        - post
      description: Get the post by the post id.
      parameters:
        - in: path
          name: postId
          schema:
            type: integer
          required: true
          description: The id of the post.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './models/Post.yml#/components/schemas/Post'
    delete:
      tags:
        - post
      description: Delete the post by the post id.
      parameters:
        - in: path
          name: postId
          schema:
            type: integer
          required: true
          description: The id of the post.
      responses:
        '200':
          description: OK
    put:
      tags:
        - post
      description: Update the post by the topic id.
      parameters:
        - in: path
          name: postId
          schema:
            type: integer
          required: true
          description: The id of the topic.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './models/Post.yml#/components/schemas/PostPost'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './models/Post.yml#/components/schemas/UpdatePost'
  /forum/post/{topicId}/comment:
    post:
      tags:
        - post
      description: Create a new comment.
      parameters:
        - in: path
          name: topicId
          schema:
            type: integer
          required: true
          description: The id of the topic post.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: './models/Post.yml#/components/schemas/PostPost'
                - $ref: './models/Comment.yml#/components/schemas/Comment'
      responses:
        '200':
          description: OK
        
      